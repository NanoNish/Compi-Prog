//arr[n], brr[n]
//sum(all(brr)) = k
//minimize(all(arr[i]/(brr[i]+1))
//
//S1: ans < max(second_max, max/(k+1)) if(max/(k+1)) then exit else S2
//S2: 
//
//S1: ans < 

#include <bits/stdc++.h>
#define ll long long int
#define loop(i,o,n,step) for(auto i{o}; i < n; i += step)
using namespace std;

int ques(int a, int arr[], int n){
    int cuts{0};
    loop(i,0,n,1){
        cuts += (b+a-1)/a; //always gives the ceil of int div
    }
    return cuts;
}

int main(){
    int n,k;
    cin >> n >> k;
    int arr[n];
    loop(i,0,n,1) cin >> arr[i];
    sort(arr, arr + n);
    int l = arr[n-1] / (k+1);
    int r = arr[n-1];
    int best{-1};
    while(l <= r){
        mid = l + (l - r) / 2;
        if(best > k){
            l = mid + 1;
            best = mid;
        }
        else r = mid-1;
    }
    cout << best << "\n";
}